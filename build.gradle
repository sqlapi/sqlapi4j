apply from: 'build-support/gradle/libs.gradle'

apply plugin: 'base'

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.2.1'
    }
}

tasks.withType(FindBugs){
    ignoreFailures = true
}

subprojects { project ->

    // --------------------------------
    // Increment version for deployment
    // --------------------------------

    version = '0.0.1-SNAPSHOT'

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'coveralls'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'eclipse'

    dependencies {
        compile libraries.JSR305
        compile libraries.POSTGRES
        compile libraries.SLF4J_API

        testCompile libraries.TESTNG
        testRuntime libraries.H2
    }

    repositories {
        maven { url 'http://repo1.maven.org/maven2/' }
        maven { url 'http://www.ibiblio.org/maven2/' }
        maven { url "${project.rootDir}/build-support/local-libs/repository" }
        flatDir { dirs "${project.rootDir}/build-support/local-libs/" }
    }

    buildscript {
        repositories {
            maven { url 'http://repo1.maven.org/maven2/' }
            maven { url 'http://www.ibiblio.org/maven2/' }
            maven { url "${project.rootDir}/build-support/local-libs/repository" }
        }
    }

    test {
        useTestNG()
    }

    jacocoTestReport {
        group = "Verification"
        description = "Generate Jacoco coverage reports after running tests."
         reports {
            xml.enabled true
            csv.enabled false
            html.destination "${buildDir}/reports/coverage/"
        }
    }

    checkstyleMain {
        ignoreFailures = true
        configFile = file '../etc/development/checkstyle/checkstyle-5.0.xml'
        doFirst {
            configProperties = [samedir:"etc/development/checkstyle"]
            checkstyleClasspath = files('../build-support/local-libs/JSR305CheckstylePlugin-0.4.0.jar', checkstyleClasspath)
        }
    }

    checkstyleTest {
        ignoreFailures = true
        configFile = file '../etc/development/checkstyle/checkstyle-5.0.xml'
        doFirst {
            configProperties = [samedir:"etc/development/checkstyle"]
            checkstyleClasspath = files('../build-support/local-libs/JSR305CheckstylePlugin-0.4.0.jar', checkstyleClasspath)
        }
    }

    findbugsMain {
        ignoreFailures = true
        excludeFilter file("${project.rootDir}/etc/development/findbugs/excludes.xml")
        effort = "max"
    }

    findbugsTest {
        ignoreFailures = true
    }

    // host.properties generieren, setzt auch den targetHost auf project.targetHost
    //task(generateProperties, type: com.freiheit.quotas.buildsupport.GeneratePropertiesTask) {}

    // test.properties generieren, setzt auch den targetHost auf project.targetHost
    // task(generateTestProperties, type: com.freiheit.quotas.buildsupport.GeneratePropertiesTask) { //
    //     type = 'test'
    // }

    // // host.properties laden damit sie in gradle verfügbar sind
    // task(loadProperties, type: com.freiheit.quotas.buildsupport.LoadPropertiesTask) {
    //     dependsOn generateProperties
    // }

    // // test.properties laden damit sie in gradle verfügbar sind
    // task(loadTestProperties, type: com.freiheit.quotas.buildsupport.LoadPropertiesTask) {
    //     dependsOn generateTestProperties
    //     type = 'test'
    // }
}
